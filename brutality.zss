[function size()s]
#let s = 1; # temporarily disabled
#	# the average male is roughly 30 units in size
#	let s = 1;
#	let a = (const(size.ground.back)+const(size.ground.front))/const240p(1);
#	if $a != (27,39) { let s = $a/32; }

[function bloodstorm()]
	#let s = call size();
	angledraw{scale:1,1;}
	assertspecial{flag:noshadow;}
	# explosion
	if time = 0 {
		map(brutality_rotation):= (-6+random%13);
		veladd{x:(root,gethitvar(xvel) * 0.25 * root,facing) + const240p(4-random%9); y:(root,gethitvar(yvel) * 0.40) + const240p(3-random%13);}
		sprpriority{value:-5+random%11;}
		}
	# rotation and gravity
	if time > 0 && pos y < 0 {
		angleadd{value:map(brutality_rotation);}
		gravity{}
		}
	# bouncing
	if vel y >= const240p(2) && pos y >= 0 { 
		posset{y:0}
		velset{x:0.5 * vel x; y:-0.6 * vel y}
		}
	# landing
	else if vel y >= 0 && pos y >= 0 {
		posset{y:0}
		velset{x:0; y:0}
		}
	
[function you_are_dead()g]
	let g = 0;
	# check if the character hasn't spawned the gibs yet
	ignorehitpause if numhelper(1007788) = 0 && 
	# check if the character died under the right conditions (morbid check)
	(map(brutality_overkill) > 50 # placeholder value
	|| gethitvar(attr) = const(AttrStandingSpecialThrow) || gethitvar(attr) = const(AttrCrouchingSpecialThrow) || gethitvar(attr) = const(AttrAerialSpecialThrow)
	|| gethitvar(attr) = const(AttrStandingHyperThrow) || gethitvar(attr) = const(AttrCrouchingHyperThrow) || gethitvar(attr) = const(AttrAerialHyperThrow)
	|| gethitvar(attr) = const(AttrStandingHyperAttack) || gethitvar(attr) = const(AttrCrouchingHyperAttack) || gethitvar(attr) = const(AttrAerialHyperAttack) 
	) {let g = 1;}

	# helpers for each body part
[statedef 108000; type: U; movetype: I; physics: N; anim: GIB2000;]
call bloodstorm();

[statedef 108001; type: U; movetype: I; physics: N; anim: GIB2001;]
call bloodstorm();

[statedef 108002; type: U; movetype: I; physics: N; anim: GIB2002;]
call bloodstorm();

[statedef 108003; type: U; movetype: I; physics: N; anim: GIB2003;]
call bloodstorm();

[statedef 108004; type: U; movetype: I; physics: N; anim: GIB2004;]
call bloodstorm();

[statedef 108005; type: U; movetype: I; physics: N; anim: GIB2005;]
call bloodstorm();

[statedef 108006; type: U; movetype: I; physics: N; anim: GIB2006;]
call bloodstorm();

[statedef 108007; type: U; movetype: I; physics: N; anim: GIB2007;]
call bloodstorm();

[statedef 108008; type: U; movetype: I; physics: N; anim: GIB2008;]
call bloodstorm();

[statedef 108009; type: U; movetype: I; physics: N; anim: GIB2009;]
call bloodstorm();

[statedef 108010; type: U; movetype: I; physics: N; anim: GIB2010;]
call bloodstorm();

[statedef 108011; type: U; movetype: I; physics: N; anim: GIB2011;]
call bloodstorm();

[statedef 108012; type: U; movetype: I; physics: N; anim: GIB2012;]
call bloodstorm();

[statedef 108013; type: U; movetype: I; physics: N; anim: GIB2013;]
call bloodstorm();

[statedef 108014; type: U; movetype: I; physics: N; anim: GIB2014;]
call bloodstorm();

[statedef 108015; type: U; movetype: I; physics: N; anim: GIB2015;]
call bloodstorm();

[statedef 108016; type: U; movetype: I; physics: N; anim: GIB2016;]
call bloodstorm();

[statedef 108017; type: U; movetype: I; physics: N; anim: GIB2017;]
call bloodstorm();

[statedef 108018; type: U; movetype: I; physics: N; anim: GIB2018;]
call bloodstorm();

[statedef 108019; type: U; movetype: I; physics: N; anim: GIB2019;]
call bloodstorm();

	# blood explosion
[statedef 108032; type: U; movetype: I; physics: N; anim: GIB2032;]
assertspecial{flag:noshadow;}
#palfx{time:1; mul:0+map(blood_r),0+map(blood_g),0+map(blood_b);}
angledraw{scale:1,1;}
sprpriority{value:3}
velset{y:-5}
gravity{}
if animelem = 6,>=2 {
	helper{stateno:108033; extendsmap:1;}
	destroyself{}
	}
	
	# blood splat
[statedef 108033; type: U; movetype: I; physics: N; anim: GIB2034;]
assertspecial{flag:noshadow;}
#palfx{time:1; mul:0+map(blood_r),0+map(blood_g),0+map(blood_b);}
posset{y:0;}
velset{x:0; y:0}
sprpriority{value:-5}

[statedef 108034; type: U; movetype: I; physics: N; anim: -2;]
assertspecial{flag:noshadow;}
	# cover the other on-screen characters in blood
	ignorehitpause for i = 1; 8; 1 {
	let a = player($i),ID;
	if $a != root,ID && player($i),life && abs(player($i),pos x - pos x) < const240p(80) && time < 3 {mapset{map:"brutality_bloodsplat"; value:1; redirectid:$a}}
	# cover them in blood	
	if player($i),map(brutality_bloodsplat) {
		let t = 240;
		let c = 255*(time-$t)/$t;
		if time <= $t {palfx{time:1; mul:255+map(blood_r),0+map(blood_g),0+map(blood_b); redirectid:$a}}
	# let the blood wash off slowly
		else if time = [$t,2*$t] {palfx{time:1; add:0,0,0; mul:255+map(blood_r)+$c, 0+map(blood_g)+$c, 0+map(blood_b)+$c; redirectid:$a}}
		else {map(brutality_bloodsplat):= 0;}
		}
	}
	
[statedef -4]

let loc = 1;
if incustomstate {let loc = localcoord x/stateowner,localcoord x;}

	# keep track of how much damage the character receives while in hitstun
if ctrl {map(brutality_overkill) := 0;}
else {map(brutality_overkill):= map(brutality_overkill) + gethitvar(hitdamage);}
	
let g = call you_are_dead();	
let s = call size();

ignorehitpause if roundtype > 1 && !alive && !ishelper {
	# account for 1 tick delay to root
	if numhelper(1007788) {
	# vanish
		assertspecial{flag:invisible; flag2:noshadow;}
		nothitby{value:SCA}
	# makes sure the character is glued to the ground to prevent bouncing
		if stateno != 5150 && (!incustomstate || anim = [5000,5199]) {  
			posset{y:0;}
			velset{x:0;y:0;}	
			selfstate{value:5150}		
			}
		}
	else if $g {
	# spawn gibs
		helper{stateno: 108000; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"femur"; }
		helper{stateno: 108001; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"femur"; }
		helper{stateno: 108002; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"humerus";}
		helper{stateno: 108003; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"humerus"}
		helper{stateno: 108004; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"pelvic girdle"}
		helper{stateno: 108005; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"skull"}
		helper{stateno: 108006; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"large intestine"}
		helper{stateno: 108007; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"small intestine"}
		helper{stateno: 108008; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"small intestine"}
		helper{stateno: 108009; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"liver"}
		helper{stateno: 108010; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"lung"}
		helper{stateno: 108011; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"lung"}
		helper{stateno: 108012; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"hand"}
		helper{stateno: 108013; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"hand"}
		helper{stateno: 108014; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"shin"}
		helper{stateno: 108015; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"shin"}
		helper{stateno: 108016; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"thighs"}
		helper{stateno: 108017; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"thighs"}
		helper{stateno: 108018; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"big chunk"}
		helper{stateno: 108019; extendsmap:1; pos: const(size.mid.pos.x) * $loc,const(size.mid.pos.y) * $loc; ID:1007788; name:"big chunk";}
	# spawn blood (placeholder)
		helper{stateno: 108032; extendsmap:1; pos: 0,-const(size.height)*1/3 * $loc; name:"Blood1"; ownpal:1;}
		helper{stateno: 108032; extendsmap:1; pos: 0,-const(size.height)*2/3 * $loc; name:"Blood2"; ownpal:1;}
		helper{stateno: 108032; extendsmap:1; pos: 0,-const(size.height) * $loc; name:"Blood3"; ownpal:1;}
		helper{stateno: 108034; extendsmap:1; name:"splat"; ownpal:1;}
		}
	}